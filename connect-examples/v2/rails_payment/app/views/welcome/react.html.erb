
<div class="no-boot" id="react-form"></div>

<script type="text/babel">
{// "{" shows babel highlighting in sublime

  var PaymentFields = React.createClass({
    render: function() {
      var cardErrorNodes = [];
      for (var key in this.props.cardErrors) {
        cardErrorNodes.push(<li key={key}>{this.props.cardErrors[key].message}</li>)
      }
      return (
        <table>
          <tbody>
            <tr>
              <td class="label">Card Number:</td>
              <td><div id="sq-card-number"></div></td>
            </tr>
            <tr>
              <td class="label">CVV:</td>
              <td><div id="sq-cvv"></div></td>
            </tr>
            <tr>
              <td class="label">Expiration Date: </td>
              <td><div id="sq-expiration-date"></div></td>
            </tr>
            <tr>
              <td class="label">Postal Code:</td>
              <td><div id="sq-postal-code"></div></td>
              <div id="error"></div>
            </tr>
          </tbody>
        </table>
      );
    }
  });

  var Form = React.createClass({
    getInitialState: function() {
      return {
        is_payment_success: false, //for showing #successNotification div
        is_processing: false, //for disabling payment button
        card_errors: [],
        product: {id: "001"},
        user: {name: "", email:""},
        shipping: {address1: "", address2: "", city: "", state: "", zip: ""}
      };
    },
    componentDidMount: function() {
      //Place square payment form function in componentDidMount
      //Because it has to be called after the DOM renders the divs
      this.paymentForm = new SqPaymentForm({
        applicationId: '<%=Rails.application.secrets.square_application_id %>',
        inputClass: 'sq-input',
        inputStyles: [
            {
              fontSize: '18px',
              fontFamily: 'Helvetica Neue',
              padding: '15px',
              color: '#373F4A',
              lineHeight: '24px',
              placeholderColor: '#BDBFBF',
              _webkitFontSmoothing: 'antialiased',
              _mozOsxFontSmoothing: 'grayscale'
            }
          ],
        cardNumber: {
          elementId: 'sq-card-number',
          placeholder: '0000 0000 0000 0000'
        },
        cvv: {
          elementId: 'sq-cvv',
          placeholder: 'CVV'
        },
        expirationDate: {
          elementId: 'sq-expiration-date',
          placeholder: 'MM/YY'
        },
        postalCode: {
          elementId: 'sq-postal-code',
          placeholder: '94110'
        },
        callbacks: {
          cardNonceResponseReceived: function(errors, nonce, cardData) {
            if (errors){
              this.setState({is_processing: false, card_errors: errors});
            }else{
              this.setState({card_errors: []});
              this.chargeCardWithNonce(nonce);
            }

          }.bind(this), //needed to bring this into context
          unsupportedBrowserDetected: function() {
            // Alert the buyer
          }.bind(this)
        }
      });
      this.paymentForm.build();
    },
    chargeCardWithNonce: function(nonce) {
      console.log("charging card with nonce");
      var url = "/charges/charge_card";
      var data = {
        nonce: nonce,
        product_id: this.state.product.id,
        name: this.state.user.name,
        email: this.state.user.email,
        street_address_1: this.state.shipping.address1,
        street_address_2: this.state.shipping.address2,
        city: this.state.shipping.city,
        state: this.state.shipping.state,
        zip: this.state.shipping.zip
      };
      console.log(data);

      $.post( url, data, function( data ) {
          if (data.status == 200) {
            this.setState({is_payment_success: true})
          }else if (data.status == 400){
            var errors = []
            for (var i =0; i < data.errors.length; i++){
              errors.push({message: data.errors[i].detail});
            }
            this.setState({card_errors: errors})
          }
          this.setState({is_processing: false})
      }.bind(this));
    },
    handleSubmit: function() {
      this.setState({is_processing: true});
      this.paymentForm.requestCardNonce();
    },
    render: function() {
      if (this.state.is_payment_success == true){
        return (
          <div id="successNotification">
            Card Charged Succesfully!!
          </div>
        )
      }else{
        return (
            <div id="sq-ccbox">
              <div id="nonce-form">
                <PaymentFields cardErrors={this.state.card_errors} />
                <div>
                  <input type="submit" id="submit" value="Buy Now" className="btn btn-primary" onClick={this.handleSubmit} disabled={this.state.is_processing}/>
                </div>
              </div>
            </div>
        );
      }
    }
  });

  ReactDOM.render(<Form />, document.getElementById('react-form'));
}
</script>
